//常用app/library 项目的配置gradle文件
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('MMddHH',TimeZone.getDefault())
    printf(formattedDate)
    return formattedDate
}
def computeVersionName() {
    return project.versionName + "." + project.versionCode + "." + buildTime()
}



def isWindows() {
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.indexOf("windows") >= 0) {
        return true;
    }
    return false;
}

if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
    android {
        compileSdkVersion Integer.parseInt(project.compileSdkVersion)
        buildToolsVersion project.buildToolsVersion

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        defaultConfig {
            minSdkVersion Integer.parseInt(project.minSdkVersion)
            targetSdkVersion Integer.parseInt(project.targetSdkVersion)
            versionCode Integer.parseInt(project.versionCode)
            versionName computeVersionName()
        }
    }

    android {
        useLibrary  'org.apache.http.legacy'
//        packagingOptions {
////        pickFirst 'META-INF/foo.txt'
//
//            exclude 'META-INF/DEPENDENCIES.txt'
//            exclude 'META-INF/LICENSE.txt'
//            exclude 'META-INF/NOTICE.txt'
//            exclude 'LICENSE.txt'
//            exclude 'META-INF/LICENSE'
//            exclude 'META-INF/license.txt'
//            exclude 'META-INF/NOTICE'
//            exclude 'META-INF/notice.txt'
//            exclude 'META-INF/ASL2.0'
//            exclude 'META-INF/RELEASE_NOTES.txt'
//        }

        packagingOptions.excludes = [
                'LICENSE.txt',
                'META-INF/LICENSE.txt',
                'META-INF/LICENSE',
                'META-INF/license.txt',
                'META-INF/DEPENDENCIES.txt',
                'META-INF/NOTICE.txt',
                'META-INF/NOTICE',
                'META-INF/notice.txt',
                'META-INF/ASL2.0',
                'META-INF/RELEASE_NOTES.txt'
        ]

        signingConfigs {
            debug {
                storeFile file(project.storeFile)
                storePassword project.storePassword
                keyAlias project.keyAlias
                keyPassword project.keyPassword
            }
        }

        buildTypes {
            release {
                shrinkResources true
                zipAlignEnabled true
                versionNameSuffix "-release"
                signingConfig signingConfigs.debug
                minifyEnabled true
            }

            debug {
                shrinkResources false
                zipAlignEnabled false
                versionNameSuffix "-debug"
                signingConfig signingConfigs.debug
            }

        }

        lintOptions {
            abortOnError false
            quiet false
            showAll true
            checkReleaseBuilds true
            abortOnError false
            check 'NewApi'  //新API
            showAll true
            textReport true
            textOutput file("${cmccRoot}/build-outputs/lint/${project.name}_lint-report.txt")
            xmlReport true
            xmlOutput file("${cmccRoot}/build-outputs/lint/${project.name}_lint-report.xml")
            htmlReport true
            htmlOutput file("${cmccRoot}/build-outputs/lint/${project.name}_lint-report.html")
        }

        dexOptions {
            preDexLibraries = false
            incremental true
            javaMaxHeapSize "2048M"

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support:cardview-v7:23.4.0'
}

if (plugins.hasPlugin('com.android.library')) {
    android.libraryVariants.all { variant ->
        def name = variant.buildType.name
        def task = project.tasks.create "jar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        artifacts.add('archives', task);
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
    }
}